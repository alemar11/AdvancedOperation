env:
  global:
    - LC_CTYPE=en_US.UTF-8
    - LANG=en_US.UTF-8
    - IOS_FRAMEWORK_SCHEME="AdvancedOperation iOS"
    - MACOS_FRAMEWORK_SCHEME="AdvancedOperation macOS"
    - TVOS_FRAMEWORK_SCHEME="AdvancedOperation tvOS"
    - WATCHOS_FRAMEWORK_SCHEME="AdvancedOperation watchOS"
    - IOS_SDK=iphonesimulator11.3
    - MACOS_SDK=macosx10.13
    - TVOS_SDK=appletvsimulator11.3
    - WATCHOS_SDK=watchsimulator4.3
    - XCODE_RUN_TESTS="NO"
    - XCODE_CONFIGURATION="DEBUG"

matrix:
  include:

    # macOS: Swift Tests, CocoaPods and SwiftLint
    - os: osx
      osx_image: xcode9.3beta
      language: objective-c
      before_install:
        - gem install cocoapods -no-rdoc --no-ri --no-document --quiet
        - brew install swiftlint
      before_script:
        - swiftlint --reporter "emoji"  
      script:
        - set -o pipefail  
        - swift --version
        - swift build
        - swift test
        #- pod lib lint    

    # iOS 11.3 Debug
    - os: osx
      osx_image: xcode9.3beta
      language: objective-c
      env: 
        - DESTINATION="OS=11.3,name=iPhone X" SCHEME="$IOS_FRAMEWORK_SCHEME" SDK="$IOS_SDK" XCODE_RUN_TESTS="YES" CODECOV_FLAG="ios" XCODE_CONFIGURATION="DEBUG"

    # iOS 11.3 Release
    - os: osx
      osx_image: xcode9.3beta
      language: objective-c
      env: 
        - DESTINATION="OS=11.3,name=iPhone X" SCHEME="$IOS_FRAMEWORK_SCHEME" SDK="$IOS_SDK" XCODE_RUN_TESTS="YES" CODECOV_FLAG="ios" XCODE_CONFIGURATION="RELEASE"

    #watchOS 4.3 Debug
    - os: osx
      osx_image: xcode9.3beta
      language: objective-c
      env: 
        - DESTINATION="OS=4.3,name=Apple Watch - 42mm" SCHEME="$WATCHOS_FRAMEWORK_SCHEME" SDK="$WATCHOS_SDK" XCODE_RUN_TESTS="NO" CODECOV_FLAG="watchos" XCODE_CONFIGURATION="DEBUG"

    #watchOS 4.3 Release
    - os: osx
      osx_image: xcode9.3beta
      language: objective-c
      env: 
        - DESTINATION="OS=4.3,name=Apple Watch - 42mm" SCHEME="$WATCHOS_FRAMEWORK_SCHEME" SDK="$WATCHOS_SDK" XCODE_RUN_TESTS="NO" CODECOV_FLAG="watchos" XCODE_CONFIGURATION="RELEASE"

    # tvOS 11.3 Debug
    - os: osx
      osx_image: xcode9.3beta
      language: objective-c
      env: 
        - DESTINATION="OS=11.3,name=Apple TV 4K (at 1080p)" SCHEME="$TVOS_FRAMEWORK_SCHEME" SDK="$TVOS_SDK" XCODE_RUN_TESTS="YES" CODECOV_FLAG="tvos" XCODE_CONFIGURATION="DEBUG"

    # tvOS 11.3 Release
    - os: osx
      osx_image: xcode9.3beta
      language: objective-c
      env: 
        - DESTINATION="OS=11.3,name=Apple TV 4K (at 1080p)" SCHEME="$TVOS_FRAMEWORK_SCHEME" SDK="$TVOS_SDK" XCODE_RUN_TESTS="YES" CODECOV_FLAG="tvos" XCODE_CONFIGURATION="RELEASE"

    # macOS Debug
    - os: osx
      osx_image: xcode9.3beta
      language: objective-c
      env: 
       - DESTINATION="arch=x86_64" SCHEME="$MACOS_FRAMEWORK_SCHEME" SDK="$MACOS_SDK" XCODE_RUN_TESTS="YES" CODECOV_FLAG="macos" XCODE_CONFIGURATION="DEBUG"     
    
    # macOS Release
    - os: osx
      osx_image: xcode9.3beta
      language: objective-c
      env: 
       - DESTINATION="arch=x86_64" SCHEME="$MACOS_FRAMEWORK_SCHEME" SDK="$MACOS_SDK" XCODE_RUN_TESTS="YES" CODECOV_FLAG="macos" XCODE_CONFIGURATION="RELEASE"         

bundler_args: --without release_phase

script:
  - set -o pipefail  
  - swift --version

  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      xcodebuild -version;
      xcodebuild -showsdks;

      if [[ "$XCODE_RUN_TESTS" == "YES" ]] && [[ "$XCODE_CONFIGURATION" == "DEBUG" ]]; then
        xcodebuild -scheme "$SCHEME" -sdk "$SDK" -destination "$DESTINATION" -configuration Debug ONLY_ACTIVE_ARCH=YES ENABLE_TESTABILITY=YES build-for-testing test-without-building | xcpretty;
        bash <(curl -s https://codecov.io/bash) -J 'AdvancedOperation' -cF "$CODECOV_FLAG";
      elif [[ "$XCODE_RUN_TESTS" == "NO" ]] && [[ "$XCODE_CONFIGURATION" == "DEBUG" ]]; then
        xcodebuild -scheme "$SCHEME" -sdk "$SDK" -destination "$DESTINATION" -configuration Debug ONLY_ACTIVE_ARCH=NO build | xcpretty;
      fi

      if [[ "$XCODE_RUN_TESTS" == "YES" ]] && [[ "$XCODE_CONFIGURATION" == "RELEASE" ]]; then
        xcodebuild -scheme "$SCHEME" -sdk "$SDK" -destination "$DESTINATION" -configuration Release ONLY_ACTIVE_ARCH=YES ENABLE_TESTABILITY=YES build-for-testing test-without-building | xcpretty;
      elif [[ "$XCODE_RUN_TESTS" == "NO" ]] && [[ "$XCODE_CONFIGURATION" == "RELEASE" ]]; then
        xcodebuild -scheme "$SCHEME" -sdk "$SDK" -destination "$DESTINATION" -configuration Release ONLY_ACTIVE_ARCH=NO build | xcpretty;
      fi
    fi

after_success:
  - sleep 5      